package com.TestDEVPro.dao.mysql;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.persistence.Column;
import javax.persistence.Query;
import javax.persistence.Transient;
import javax.sound.midi.SysexMessage;
import javax.sql.DataSource;
import javax.transaction.Transactional;


import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.FlushModeType;
import javax.persistence.PersistenceContext;
import javax.persistence.PersistenceUnitUtil;
import javax.transaction.Transactional;
import javax.persistence.Query;


import javax.annotation.Resource;
import javax.sql.DataSource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Repository;
import org.apache.log4j.*;



import com.TestDEVPro.domain.core.Ibmdata;
import com.TestDEVPro.domain.core.TeUser;


/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
 * build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Transactional
@Repository("Ibmdata_Default_ActivityDao")
public class Ibmdata_Default_ActivityDao   {

	//private Log log = LogFactory.getLog(getClass());
	private static Logger log = Logger.getLogger(Ibmdata_Default_ActivityDao.class.getName());

	@Value("${create_Ibmdata.sql}")
	private String create_Ibmdata;
	@Value("${search_for_update_Ibmdata.sql}")
	private String search_for_update_Ibmdata;
	@Value("${update_Ibmdata.sql}")
	private String update_Ibmdata;
	@Value("${delete_Ibmdata.sql}")
	private String delete_Ibmdata;
	@Value("${get_all_Ibmdata.sql}")
	private String get_all_Ibmdata;


    @PersistenceContext
	private EntityManager entityManager;



	// auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform fetch operation of  Ibmdata noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_Ibmdata object will return
	*@throws Exception
	*/

	public Ibmdata ibmdata_search_for_update(long id, TeUser user) throws Exception {
		  log.setLevel(Level.INFO);
	      log.info("ibmdata_search_for_update Dao started operation!");

		try{

			Query result =  entityManager.
			createNativeQuery(search_for_update_Ibmdata,Ibmdata.class)

			.setParameter("id", id);;

			ArrayList<Ibmdata> Ibmdata_list =	(ArrayList<Ibmdata>)result.getResultList();

			if(Ibmdata_list  == null){

			log.error("ibmdata_search_for_update Dao throws exception :" + "no Ibmdata found" );
			throw new Exception("no Ibmdata found");
			}
			log.info("Object returned from ibmdata_search_for_update  Dao method !");
			return (Ibmdata) Ibmdata_list.get(0);

		}catch(Exception e){

			//new Exception(e.toString());  // this needs to be changed
			log.error("ibmdata_search_for_update Dao throws exception : "+e.toString());

		}
		return null;


	}

	// auths not ready at this time

	/**
	*
	*The purpose of Dao method is to get list of  Ibmdata noun from  database
	*
	*
	*@return List of Ibmdata object will return
	*@throws Exception
	*/

	public ArrayList<Ibmdata> get_all_ibmdata() throws Exception {
		  log.setLevel(Level.INFO);
	      log.info("get_all_ibmdata Dao started operation!");

		try{

			Query result =  entityManager.
			createNativeQuery(get_all_Ibmdata,Ibmdata.class)

;

			ArrayList<Ibmdata> Ibmdata_list =	(ArrayList<Ibmdata>)result.getResultList();

			if(Ibmdata_list .size() < 1){

			log.error("get_all_ibmdata Dao throws exception :" + "no Ibmdata found" );
			throw new Exception("no Ibmdata found");
			}
			log.info("Object returned from get_all_ibmdata  Dao method !");
			return (ArrayList<Ibmdata>) Ibmdata_list;

		}catch(Exception e){

			//new Exception(e.toString());  // this needs to be changed
			log.error("get_all_ibmdata Dao throws exception : "+e.toString());

		}
		return null;


	}



	//auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform save operation of  Ibmdata noun into database
	*@param Ibmdata
	*@param user
	*@return Ibmdata object will return
	*@throws Exception
	*/

	@Transactional
	public Ibmdata create_ibmdata(Ibmdata Ibmdata, TeUser user) throws Exception {

	 	  log.setLevel(Level.INFO);
	      log.info("create_ibmdata Dao started operation!");

		try{
			Query query = entityManager
					.createNativeQuery(create_Ibmdata)
			.setParameter("lotusseller_1", Ibmdata.getLotusseller_1())
			.setParameter("quarter", Ibmdata.getQuarter())
			.setParameter("products", Ibmdata.getProducts())
			.setParameter("oldforecasttype", Ibmdata.getOldforecasttype())
			.setParameter("lastupdate", Ibmdata.getLastupdate())
			.setParameter("noteid", Ibmdata.getNoteid())
			.setParameter("projdur", Ibmdata.getProjdur())
			.setParameter("history", Ibmdata.getHistory())
			.setParameter("rolesuser", Ibmdata.getRolesuser())
			.setParameter("estsigndate", Ibmdata.getEstsigndate())
			.setParameter("technology", Ibmdata.getTechnology())
			.setParameter("lotusseller", Ibmdata.getLotusseller())
			.setParameter("pricecaselink", Ibmdata.getPricecaselink())
			.setParameter("modified", Ibmdata.getModified())
			.setParameter("doclink", Ibmdata.getDoclink())
			.setParameter("href", Ibmdata.getHref())
			.setParameter("sowcurrency", Ibmdata.getSowcurrency())
			.setParameter("client", Ibmdata.getClient())
			.setParameter("spif", Ibmdata.getSpif())
			.setParameter("territory", Ibmdata.getTerritory())
			.setParameter("created", Ibmdata.getCreated())
			.setParameter("roles", Ibmdata.getRoles())
			.setParameter("engagementmanager", Ibmdata.getEngagementmanager())
			.setParameter("project", Ibmdata.getProject())
			.setParameter("keytrans", Ibmdata.getKeytrans())
			.setParameter("forecast", Ibmdata.getForecast())
			.setParameter("sowamount", Ibmdata.getSowamount())
			.setParameter("region", Ibmdata.getRegion())
			.setParameter("revenuetype", Ibmdata.getRevenuetype())
			.setParameter("authors", Ibmdata.getAuthors())
			.setParameter("weekp", Ibmdata.getWeekp())
			.setParameter("unid", Ibmdata.getUnid())
			.setParameter("mthadjfst", Ibmdata.getMthadjfst())
			.setParameter("linkyesno", Ibmdata.getLinkyesno())
			.setParameter("avpoffering", Ibmdata.getAvpoffering())
			.setParameter("bdm", Ibmdata.getBdm())
			.setParameter("prjstartdate", Ibmdata.getPrjstartdate())
			.setParameter("dbserver", Ibmdata.getDbserver())
			.setParameter("avpleadsource", Ibmdata.getAvpleadsource())
			.setParameter("forecastsw", Ibmdata.getForecastsw())
			.setParameter("forecastview", Ibmdata.getForecastview())
			.setParameter("mdoc", Ibmdata.getMdoc())
			.setParameter("quote", Ibmdata.getQuote())
			.setParameter("ssr", Ibmdata.getSsr())
			.setParameter("form", Ibmdata.getForm())
			.setParameter("sendforecastsw", Ibmdata.getSendforecastsw())
			.setParameter("forecasttype", Ibmdata.getForecasttype())
			.setParameter("salesincentive", Ibmdata.getSalesincentive())
			.setParameter("created_by", user == null ? 0:user.getId())
			.setParameter("updated_by", user == null ? 0:user.getId())
;

			int insertedId = query.executeUpdate();
					String lastIndex="select last_insert_id()";
					Query sql = entityManager.createNativeQuery(lastIndex);
					BigInteger new_id = (BigInteger) sql.getSingleResult();
					Ibmdata.setId(new_id.longValue());
					System.out.println("create data---"+insertedId);

			log.info("Object returned from create_ibmdata  Dao method !");

			return Ibmdata;

		}catch(Exception e){

			//System.out.println("DAOException: " + e.toString());
			log.error(" Dao method (create_ibmdata) throws Exception : "+e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform update operation of  Ibmdata noun into database
	*@param Ibmdata
	*@param user
	*@return the_Ibmdata object will return
	*@throws Exception
	*/

	@Transactional
	public Ibmdata update_ibmdata(Ibmdata Ibmdata, TeUser user) throws Exception {

	 	  log.setLevel(Level.INFO);
	      log.info("update_ibmdata Dao started operation!");

		try{
			Query query = entityManager
					.createNativeQuery(update_Ibmdata)
			.setParameter("id", Ibmdata.getId())
			.setParameter("lotusseller_1", Ibmdata.getLotusseller_1())
			.setParameter("quarter", Ibmdata.getQuarter())
			.setParameter("products", Ibmdata.getProducts())
			.setParameter("oldforecasttype", Ibmdata.getOldforecasttype())
			.setParameter("lastupdate", Ibmdata.getLastupdate())
			.setParameter("noteid", Ibmdata.getNoteid())
			.setParameter("projdur", Ibmdata.getProjdur())
			.setParameter("history", Ibmdata.getHistory())
			.setParameter("rolesuser", Ibmdata.getRolesuser())
			.setParameter("estsigndate", Ibmdata.getEstsigndate())
			.setParameter("technology", Ibmdata.getTechnology())
			.setParameter("lotusseller", Ibmdata.getLotusseller())
			.setParameter("pricecaselink", Ibmdata.getPricecaselink())
			.setParameter("modified", Ibmdata.getModified())
			.setParameter("doclink", Ibmdata.getDoclink())
			.setParameter("href", Ibmdata.getHref())
			.setParameter("sowcurrency", Ibmdata.getSowcurrency())
			.setParameter("client", Ibmdata.getClient())
			.setParameter("spif", Ibmdata.getSpif())
			.setParameter("territory", Ibmdata.getTerritory())
			.setParameter("created", Ibmdata.getCreated())
			.setParameter("roles", Ibmdata.getRoles())
			.setParameter("engagementmanager", Ibmdata.getEngagementmanager())
			.setParameter("project", Ibmdata.getProject())
			.setParameter("keytrans", Ibmdata.getKeytrans())
			.setParameter("forecast", Ibmdata.getForecast())
			.setParameter("sowamount", Ibmdata.getSowamount())
			.setParameter("region", Ibmdata.getRegion())
			.setParameter("revenuetype", Ibmdata.getRevenuetype())
			.setParameter("authors", Ibmdata.getAuthors())
			.setParameter("weekp", Ibmdata.getWeekp())
			.setParameter("unid", Ibmdata.getUnid())
			.setParameter("mthadjfst", Ibmdata.getMthadjfst())
			.setParameter("linkyesno", Ibmdata.getLinkyesno())
			.setParameter("avpoffering", Ibmdata.getAvpoffering())
			.setParameter("bdm", Ibmdata.getBdm())
			.setParameter("prjstartdate", Ibmdata.getPrjstartdate())
			.setParameter("dbserver", Ibmdata.getDbserver())
			.setParameter("avpleadsource", Ibmdata.getAvpleadsource())
			.setParameter("forecastsw", Ibmdata.getForecastsw())
			.setParameter("forecastview", Ibmdata.getForecastview())
			.setParameter("mdoc", Ibmdata.getMdoc())
			.setParameter("quote", Ibmdata.getQuote())
			.setParameter("ssr", Ibmdata.getSsr())
			.setParameter("form", Ibmdata.getForm())
			.setParameter("sendforecastsw", Ibmdata.getSendforecastsw())
			.setParameter("forecasttype", Ibmdata.getForecasttype())
			.setParameter("salesincentive", Ibmdata.getSalesincentive())
			.setParameter("updated_by", user == null ? 0:user.getId())
;

			query.executeUpdate();

			log.info("Object returned from update_ibmdata  Dao method !");

			return Ibmdata;

		}catch(Exception e){

			//System.out.println("DAOException: " + e.toString());
			log.error(" Dao method (update_ibmdata) throws Exception : "+e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform delete operation of  Ibmdata noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_Ibmdata id deleted based on id
	*@throws Exception
	*/

	@Transactional
	public String  delete_ibmdata(long id, TeUser user) throws Exception {

	 	  log.setLevel(Level.INFO);
	      log.info("delete_ibmdata Dao started operation!");

		try{
			Query query = entityManager
					.createNativeQuery(delete_Ibmdata)
			.setParameter("id", id);

			query.executeUpdate();

			log.info("Object returned from delete_ibmdata  Dao method !");

			return "{\"status\":\"success\"}";

		}catch(Exception e){

			//System.out.println("DAOException: " + e.toString());
			log.error(" Dao method (delete_ibmdata) throws Exception : "+e.toString());

		}
		return null;



	}



}